/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type BusinessStatus = "approved" | "pending" | "rejected";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type NotificationType = "new_listing" | "new_reservation_partner" | "reservation_confirmed" | "reservation_expired" | "reservation_expiring";

export type Numeric = ColumnType<string, number | string, number | string>;

export type OrderStatus = "cancelled" | "completed" | "confirmed" | "pending";

export type ProductStatus = "available" | "expired" | "paused" | "sold_out";

export type ReservationStatus = "cancelled" | "expired" | "redeemed" | "reserved";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export type UserRole = "admin" | "partner" | "user";

export interface Businesses {
  address: string;
  businessType: string;
  contactEmail: string | null;
  createdAt: Generated<Timestamp | null>;
  description: string;
  id: Generated<number>;
  latitude: Numeric | null;
  logoUrl: string | null;
  longitude: Numeric | null;
  name: string;
  ownerId: number;
  phone: string | null;
  status: Generated<BusinessStatus>;
  updatedAt: Generated<Timestamp | null>;
}

export interface EmailLogs {
  email: string;
  errorMessage: string | null;
  id: Generated<number>;
  notificationType: string;
  sentAt: Generated<Timestamp | null>;
  success: boolean;
  userId: number;
}

export interface LoginAttempts {
  attemptedAt: Generated<Timestamp | null>;
  email: string;
  id: Generated<number>;
  success: Generated<boolean | null>;
}

export interface Notifications {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  isRead: Generated<boolean | null>;
  link: string | null;
  message: string;
  metadata: Json | null;
  title: string;
  type: NotificationType;
  userId: number;
}

export interface OauthAccounts {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  provider: string;
  providerEmail: string;
  providerUserId: string;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface OauthStates {
  codeVerifier: string;
  createdAt: Generated<Timestamp | null>;
  expiresAt: Timestamp;
  id: Generated<number>;
  provider: string;
  redirectUrl: string;
  state: string;
}

export interface Orders {
  createdAt: Generated<Timestamp | null>;
  customerEmail: string;
  customerName: string;
  id: Generated<number>;
  productId: number;
  quantity: number;
  status: Generated<OrderStatus | null>;
  totalPrice: Numeric;
  updatedAt: Generated<Timestamp | null>;
  userId: number | null;
}

export interface Products {
  availableDate: Timestamp;
  businessId: number;
  createdAt: Generated<Timestamp | null>;
  description: string;
  discountedPrice: Numeric;
  expiresAt: Timestamp | null;
  id: Generated<number>;
  imageUrl: string | null;
  originalPrice: Numeric;
  pickupTimeEnd: string;
  pickupTimeStart: string;
  quantity: number;
  status: Generated<ProductStatus | null>;
  title: string;
  updatedAt: Generated<Timestamp | null>;
}

export interface Reservations {
  createdAt: Generated<Timestamp | null>;
  expiresAt: Timestamp;
  id: Generated<number>;
  productId: number;
  quantity: Generated<number>;
  redeemedAt: Timestamp | null;
  reservedAt: Generated<Timestamp>;
  status: Generated<ReservationStatus>;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
  verificationCode: string;
}

export interface Sessions {
  createdAt: Generated<Timestamp | null>;
  expiresAt: Timestamp;
  id: string;
  lastAccessed: Generated<Timestamp | null>;
  userId: number;
}

export interface UserPasswords {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  passwordHash: string;
  userId: number;
}

export interface Users {
  avatarUrl: string | null;
  createdAt: Generated<Timestamp | null>;
  displayName: string;
  email: string;
  id: Generated<number>;
  penaltyCount: Generated<number>;
  penaltyUntil: Timestamp | null;
  role: Generated<UserRole>;
  updatedAt: Generated<Timestamp | null>;
}

export interface UserSettings {
  createdAt: Generated<Timestamp | null>;
  emailNotificationsEnabled: Generated<boolean | null>;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface DB {
  businesses: Businesses;
  emailLogs: EmailLogs;
  loginAttempts: LoginAttempts;
  notifications: Notifications;
  oauthAccounts: OauthAccounts;
  oauthStates: OauthStates;
  orders: Orders;
  products: Products;
  reservations: Reservations;
  sessions: Sessions;
  userPasswords: UserPasswords;
  users: Users;
  userSettings: UserSettings;
}


// Use these for zod schema enums or other purposes, since the kysely enums are just types
export const UserRoleArrayValues: [UserRole, ...UserRole[]] = ["admin","partner","user"];
export const ProductStatusArrayValues: [ProductStatus, ...ProductStatus[]] = ["available","expired","paused","sold_out"];
export const OrderStatusArrayValues: [OrderStatus, ...OrderStatus[]] = ["cancelled","completed","confirmed","pending"];
export const BusinessStatusArrayValues: [BusinessStatus, ...BusinessStatus[]] = ["approved","pending","rejected"];
export const ReservationStatusArrayValues: [ReservationStatus, ...ReservationStatus[]] = ["cancelled","expired","redeemed","reserved"];
export const NotificationTypeArrayValues: [NotificationType, ...NotificationType[]] = ["new_listing","new_reservation_partner","reservation_confirmed","reservation_expired","reservation_expiring"];
// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.